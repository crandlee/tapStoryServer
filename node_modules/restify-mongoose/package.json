{
  "name": "restify-mongoose",
  "version": "0.2.2",
  "description": "Expose mongoose models as REST resources",
  "author": {
    "name": "christoph.walcher@gmail.com"
  },
  "contributors": [
    {
      "name": "Matthieu Bacconnier",
      "email": "neamar@neamar.fr",
      "url": "http://blog.neamar.fr"
    },
    {
      "name": "Dave Jensen",
      "email": "david@jensen47.com",
      "url": "http://build47.com"
    }
  ],
  "main": "index.js",
  "scripts": {
    "test": "NODE_ENV=test mocha -R spec test/",
    "cover": "NODE_ENV=test istanbul cover ./node_modules/mocha/bin/_mocha --report lcov -- -R spec"
  },
  "keywords": [
    "restify",
    "mongoose",
    "REST",
    "resource"
  ],
  "license": "BSD-2-Clause",
  "dependencies": {
    "async": "~0.9.0",
    "restify": "~2.8.1",
    "mongoose": "~3.8.9"
  },
  "devDependencies": {
    "mocha": "~1.19.0",
    "supertest": "~0.12.1",
    "should": "~3.3.1"
  },
  "bugs": {
    "url": "https://github.com/saintedlama/restify-mongoose/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/saintedlama/restify-mongoose.git"
  },
  "readme": "# Restify-Mongoose\n[![Build Status](https://travis-ci.org/saintedlama/restify-mongoose.png?branch=master)](https://travis-ci.org/saintedlama/restify-mongoose)\n[![Coverage Status](https://coveralls.io/repos/saintedlama/restify-mongoose/badge.png?branch=master)](https://coveralls.io/r/saintedlama/restify-mongoose?branch=master)\n\nRestify-Mongoose provides a resource abstraction for [restify](http://mcavage.me/node-restify/) to expose mongoose models as REST resources.\n\n## Getting started\nFirst you'll need to install restify-mongoose via npm\n\n    npm install restify-mongoose\n\nSecond step is to wire up mongoose and restify using restify-mongoose\n\n```javascript\nvar restify = require('restify');\nvar restifyMongoose = require('restify-mongoose');\nvar mongoose = require('mongoose');\n\nvar server = restify.createServer({\n    name: 'restify.mongoose.examples.notes',\n    version: '1.0.0'\n});\n\nserver.use(restify.acceptParser(server.acceptable));\nserver.use(restify.queryParser());\nserver.use(restify.bodyParser());\n\n// Create a simple mongoose model 'Note'\nvar NoteSchema = new mongoose.Schema({\n    title : { type : String, required : true },\n    date : { type : Date, required : true },\n    tags : [String],\n    content : { type: String }\n});\n\nvar Note = mongoose.model('notes', NoteSchema);\n\n// Now create a restify-mongoose resource from 'Note' mongoose model\nvar notes = restifyMongoose(Note);\n\n// Serve resource notes with fine grained mapping control\nserver.get('/notes', notes.query());\nserver.get('/notes/:id', notes.detail());\nserver.post('/notes', notes.insert());\nserver.patch('/notes/:id', notes.update());\nserver.del('/notes/:id', notes.remove());\n\nserver.listen(3000, function () {\n    console.log('%s listening at %s', server.name, server.url);\n});\n```\n\n# Resources\nTo map resources or resource functionality to restify REST endpoints/routes restify-mongoose offers\ntwo approaches:\n\n* 'fine grained mapping' control via list, detail, new, update and delete functions\n* 'quick mapping' via serve method\n\n__Fine grained mapping__\nIn the above getting started example we used fine grained mapping control. Restify-mongoose defines the functions `query`,\n`detail`, `insert`, `update` and `remove` that return restify route handlers and can be used like this:\n\n```javascript\n // Serve resource notes with fine grained mapping control\n server.get('/notes', notes.query());\n server.get('/notes/:id', notes.detail());\n server.post('/notes', notes.insert());\n server.patch('/notes/:id', notes.update());\n server.del('/notes/:id', notes.remove());\n```\n\nFor every ´id´ dependent function the restify route has to define a `:id` placeholder to allow restify-mongoose to access\nid parameters. Id dependent functions are `detail`, `update` and `delete`.\n\n__Quick mapping__\n\n```javascript\n// Serve resource notes with quick mapping\nrestifyMongoose(models.Note).serve('/api/notes', server);\n```\n\nMaps urls\n\n* GET '/api/notes' to `query` function\n* GET '/api/notes/:id' to `detail` function\n* POST '/api/notes' to `insert` function\n* DELETE '/api/notes/:id' to `remove` function\n* PATCH '/api/notes/:id' to `update` function\n\n## Queries\nQuery parameters are passed by query string parameter __q__.\n\nQuery parameters are parsed as JSON objects and passed to [mongoose where query function](http://mongoosejs.com/docs/api.html#query_Query-where).\n\nTo filter a notes resource by title to match term \"first\" append the __q__ query parameter to the URL:\n\n    http://localhost:3000/notes?q={\"title\":\"first\"}\n\n\n## Sort\nSort parameters are passed by query string parameter __sort__.\n\nSort parameters are passed directly to [mongoose sort query function](http://mongoosejs.com/docs/api.html#query_Query-sort).\n\nTo sort a notes resource by title descending append the __sort__ query parameter to the URL:\n\n    http://localhost:3000/notes?sort=-title\n\n## Select Fields\nTo restrict selected columns you can pass a query string parameter __select__.\n\nSelect fields are passed directly to [mongoose select query function](http://mongoosejs.com/docs/api.html#query_Query-select).\n\nTo select only date the field of a notes resource append the __select__ query parameter to the URL:\n\n    http://localhost:3000/notes?select=date\n    \n## Filter\nResults can be filtered with a function, which is set in the options object of the constructor or on the `query` and `detail` function.\n\nThe function takes two parameters: the request object and the response object. The return value of the function is a query that is passed directly to the [mongoose where query function](http://mongoosejs.com/docs/api.html#query_Query-where).\n\nFor instance, you can use a filter to display only results for a particular user: \n\n```\nvar filterUser = function(req, res) {\n  return {user: req.user};\n}\n\nvar notes = restifyMongoose(Note, {filter: filterUser});\n```\n\n## Changelog\n\n### 0.2.0\n\n* Added `before` and `after` options to the `serve` function which pass arrays of handlers to the restify handler chain.\n* Added `beforeSave` functionality to the **insert** and **update** operations.\n* Added coverage script to package.json\n* The insert and update operations now use aync.waterfall\n* The server test helper has an optional parameter which will set or not set default routes \n\n### 0.2.1\n* Updates to restify 2.8.x\n* Updates to async 0.9.x\n* Improved the error message for mongoose validation errors\n* Code cleanup\n\n### 0.2.2\n* The `beforeSave` option can now be included in the options passed to the `restifyMongoose` constructor.\n",
  "readmeFilename": "README.md",
  "_id": "restify-mongoose@0.2.2",
  "_from": "restify-mongoose@"
}
