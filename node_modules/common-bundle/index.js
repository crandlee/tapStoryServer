'use strict';

var requireShortcuts = require('../../server/config/require-shortcuts.json');
var _ = require('lodash');
var path = require('path');

module.exports = function(opts) {

    opts = opts || {};

    var cb = {}

    var routePrefix = 'route-';
    cb.rootPath = path.normalize(__dirname + '/../../');
    cb.requirePath = cb.rootPath + 'server/';

    cb.rootRequire = function(key) {
        var routePath = _.find(requireShortcuts, { 'k': key });
        if (routePath) {
            return require(cb.requirePath + routePath.v);
        }
        else
            throw new Error('Cannot find the require path designated by ' + key);
    };

    cb.env = process.env.NODE_ENV = process.env.NODE_ENV || 'development';
    cb.config = cb.rootRequire('cfg-config')[cb.env];
    cb.config.rootPath = cb.rootPath;
    cb.config.uploadPath = cb.rootPath + 'server/uploads/';

    cb.getRoutePathFromKey = function() {
        var key = arguments[0] || null;
        var args = Array.prototype.slice.call(arguments, 1);
        var routePath = _.find(requireShortcuts, { 'k': key });
        if (routePath) {
            return cb.requirePath + routePath.v;
        }
        else
            throw new Error('Cannot find the require path designated by ' + key);
    };

    //Set up some requires that will be used all over the place
    cb.Promise = require('q');
    cb._ = require('lodash');
    cb.errSvc = cb.rootRequire('svc-error');
    cb.promiseUtils = cb.rootRequire('svc-promise');
    cb.extend = require('extend');
    cb.enums = cb.rootRequire('enums');

    //Test requires
    if (opts.withDatabase) {
        var dbSvc = cb.rootRequire('svc-database');
        cb.canBeginTest = null;
        dbSvc.initialize(cb.config);
    }
    if (opts.test) {
        cb.chai = require('chai');
        cb.should = cb.chai.should();
        cb.chaiAsPromised = require('chai-as-promised');
        cb.chai.use(cb.chaiAsPromised);
        cb.sinon = require('sinon');
        cb.proxyquire = require('proxyquire');
        cb.testUtils = cb.rootRequire('util-test');
        if (!opts.withDatabase) {
            cb.canBeginTest = true;
        }
        cb.waitUntilReady = function(cb) {
            setTimeout(function() {
                if (!cb.canBeginTest)
                    cb.waitUntilReady();
                else
                    cb();
            }, 1000);
        };
    }

    return cb;
};